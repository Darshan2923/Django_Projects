Note:

*****script body tag ke end me hi daalna warna chalega hi nai bilkul 2 din baithne ke baad bol raha
    This project will consist of 6 Models, so let's summarize each one:

    1. USER - Built in Django user model,  instance created for each customer who registers.

    2. CUSTOMER - Along with a User model, each customer will contain a Customer model that holds a one to one relationship to each user. (OneToOneFied)

    3. PRODUCT - The product model represents product types we have in store.

    4. ORDER - The order model will represent a transaction that is placed or pending. The model will hold information such as the transaction ID, data completed and order status. This model will be a child or the customer model but a parent to Order Items.

    5. ORDERITEM - An order Item is one item with an order. For example, a shopping cart may consist of many items but is all part of one order. Therfore the OrderItem model will be a child of the PRODUCT model AND the ORDER Model.

    6. SHIPPING - Not every order will need shipping information. For orders containing physical products that need to be shipping we will need to create an instance of the shipping model to know where to send the order. Shipping will simply be a child of the order model when necessary.

Part 1: Project Setup and templates
1.Configure Apps:Do little of settings stuff
2.Create Templates folder and templates
3.Views and Urls Configuration for app and Project
4.Static Files: CSS and Img Files
5.Main Template:Add html boilerplate,bootstrap,Container and Inheriting
6.Navbar: Bootstrap for outer css and custom css 
7.Store.html,Cart.html,Checkout.html

Part2:Data structure
1.Models
    step1:Import User Model
    step2:Customer Model
    step3:"Product","order","OrderItem" Models
    step4:Shipping Model
    step5:Migrate database
    step6:admin.py
    step7:Add some custom products to admin panel
2.Render Products
    step1:Query Products
    views.py
    def store(request):
        products=Product.objects.all()
        context={'products':products}
        return render(--""--)

 

Part2:Render Products
    Step1:Query Products
    Step2:Render Products

Part3:Product Image Field
    Step1:ImageField() in models.py
        Note: Dont put images in the static files yet put it somewhere else so we want to make it dynamic
        -Add ImageField() to models.py
        -pip install pillow
    Step2:MEDIA_ROOT
    for configuring out file for images to be uploaded to.
        settings.py
            MEDIA_ROOT=BASE_DIR/'static/img'
            this will set the path for all media files to be uploaded to

            ab jaise hi toh admin se images add karega, tere vo images automatically img file me store ho jaayege
    step3:MEDIA_URL
    settings.py
        MEDIA_URL='/images'
    step4:Urls.py config
        urls.py(ecomproj)
                from django.contrib import admin
                from django.urls import path,include
                import ecomapp
                from ecomapp import urls

                from django.conf.urls.static import static
                from django.conf import settings

                urlpatterns = [
                    path('admin/', admin.site.urls),
                    path('',include(ecomapp.urls))
                ]

                urlpatterns +=static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)




            Ab agar hum individual images chahte hai toh bhi inconsistency nai add hoga:
            http://127.0.0.1:8000/images/watch.jpg ye karne pe upload kiye hue watch ka image hi aayega


    step5:render the images
        in store.html, do {{product.image.url}}

    step6:Image attribute error solution
        models.py(Product model)
            @property
#Note: It's an attribute rather than a method due to presence of @property above
            def imageURL(self):
                try:
                    url=self.image.url
                except:
                    url=''
                return url

        store.html
         change to: {{product.imageURL}}

    step7:User cart
        step1:Add data(admin panel)
            Create a customer,orderitem and order randomly on admin panel
        step2:Query data(Cart)
            views.py
                def cart(request):
                    if request.user.is_authenticated:
                        customer=request.user.customer
                        order,created=Order.objects.get_or_create(customer=customer,complete=False)
                        items=order.orderitem_set.all()
                    else:
                        items=[]
                    context={'items':items}
        step3:Render the data(cart.html)
        just change the html in that as in:
        for item in items...
            {{item.product.imageURL}},{{item.product.name}},{{item.quantity}} and {{item.product.price | floatformat:2}}
        step4:Calculating totals
            we'll create an method for our orderitem models.py shit
            class OrderItem(models.Model):
                ---""---
                @property
                def get_total(self):
                    total=self.product_price*self.quantity
                    return total

            And...
            class Order(models.Model):
            ---""---
            @property
            def get_cart_total(self):
                orderitems=self.orderitem_set.all()
                total=sum([item.get_total for item in orderitems])
                return total
            @property
            def get_cart_items(self):
                orderitems=self.orderitem_set.all()
                total=sum([item.quantity for item in orderitems])
                return total
            
            cart.html me
            render:
                {{item.get_total}},{{order.get_cart_items}},{{order.get_cart_total}},etc...


            for unbound local error for unlogined user,
            in else part of cart function in view.py,
            add
            
            else:
                items=[]
                order={'get_cart_items':0,'get_cart_total':0}
        step5:Query totals
        completed
        step6:Render totals
        completed
        step7:Checkout page data
        same exact view for checkout same as cart
            render cart data in checkout.html {{}} ye wala cheez


Part 3:Site Functionality
We'll make use of js and eventlisteners to listen to the button clicked...
Step1:Cart.html-Create js folder in static and add js script link
        add to store.html:   <button data-product={{product.id}} data-action="add"...
        ye js me kaam aayega when you do this.dataset.product aur this.dataset.action
        Now we know ki ho raha hai bc console me click karege toh id aur action aayega

Step3: Use type logic using js
    We need to authenticate user to do the shit different for logged in and not user
    index.html
        <script type="text/javascript" src="{% static 'js/cart.js' %}">
        var user = '{{request.user}}'
    </script>
     add in cart.js
     console.log('User:',user);
     if(user=='AnonymousUser'){
        console.log('User is not authenticated')
     }
     else{
        console.log('User authenticated')
     }

Step4:updateItem view
    When logged in user clicks 'add to cart' we want to send data to view to handle it
    we'll create a view called update item
    from django.http import JsonResponse

    def updateItem(request):
        return JsonResponse('Item was added',safe=False);

    create a url for the same thing
    Create user function in cart.js (updateUserOrder):
     
     else{
        updateUserOrder(productId,action);
     }

     function updateUserOrder(productId,action){
       console.log("User is authenticated,sending data...");
       var url = '/update_item/'

    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 'productId': productId, 'action': action })
    })
        .then((response) => {
            return response.json();
        })
        .then((data) => {
            console.log('Data:', data)
        });
     }


        
Ye wala error aayega bc karege tabhi so we'll add csrf token wala code ajax csrf token django search karke milega vo        
       POST http://127.0.0.1:8000/update_item/ 403 (Forbidden)
updateUserOrder @ cart.js:26
(anonymous) @ cart.js:16
VM172:2 Uncaught (in promise) SyntaxError: Unexpected token '<', "
<!DOCTYPE "... is not valid JSON


Step5:updateItem view logic
view.py
def updateItem(request):
	data=json.loads(request.body)
	productId=data['productId']
	action=data['action']
	print('Action: ',action)
	print('productId: ',productId)

	customer=request.user.customer
	product=Product.objects.get(id=productId)
	order,created=Order.objects.get_or_create(customer=customer,complete=False)
	orderItem,created=OrderItem.objects.get_or_create(order=order,product=product)

	if action=='add':
		orderItem.quantity=(orderItem.quantity+1)
	if action=='remove':
		orderItem.quantity=(orderItem.quantity-1)

	orderItem.save()

	if orderItem.quantity<=0:
		orderItem.delete()
	return JsonResponse('Item was added',safe=False)


#########################3All work perfectly when add item is clicked...

step6:Cart Total(red point on top of cart icon)

We can use rest api to handle this shit, but for now, we'll pass getcartitems in every view of page and change {{0}} to {{cartItems}}
views.py
def store(request):
''''''-----'''''
cartItems=order.get_cart_items
context={----''---}


Part2:Update Cart Items
Step1:Add data-product and data-action to up and down arrow images
        as we're looping through the item, we'll use item.product.id
                 <img data-product="{{item.product.id}}" data-action="add" class="update-cart chg-quantity" src="{% static  'img/up_arrow.png' %}">
                 Ye kaam kar raha hai views me updateitem karke function hai jo update kar raha hai bc
Step2:Shipping Address addition
        Part1:Add Shipping property to the Order model
        Here we'll add shipping for only physical products and not digital products
            @property
            def shipping(self):
                shipping=False
                orderitems=self.orderitem_set.all()
                for i in orderitems:
                    if i.product.digital==False:
                        shipping=True
                return shipping
        
        Part2:Order Shipping Status
        add 'shipping'=False to non logged in user 

        Part3:Hiding Shipping Form using javascript
        Add javascript to checkout.html
            var shipping = '{{order.shipping}}'

        if (shipping == 'False') {
            document.getElementById('shipping-info').innerHTML = ''
        }

        Part4:Payment Option button
        Add payment wrapper just after the continue button is clicked
        1) Add eventlisteners in checkout.html
            var form=document.getElementById('form')
            form.addEventListener('submit',function(e){
                e.preventDefault()
                console.log("Form Submitted...")
                document.getElementById('form-button').classList.add("hidden");
                document.getElementById('payment-info').classList.remove("hidden"); 
            })


