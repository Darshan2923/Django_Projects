-What is Django?
-Web,server side framework.
-MVT design pattern, Batteries included.(MVC-model view controller, MVT-model view template).
-web framework:- collection of modules,packages and libraries designed to speed up the dev.


--MVT(Model-Data access layer, Template-Presentation Layer,View-Business Logic)

                        httpResponse         --->
            --->        ------------>        <---   Models
facebook.com       urls                 Views
            <---        <------------        --->
                         httpRequest         <---   Templates


*******startproject*******
manage.py  -> file where we execute our command from
db.sqlite3 -> sqlite database
wsgi -> web server gateway interface -> actual server
urls.py -> url routing in our project
asgi.py ->asynchronous calls somethin'
settings.py ->project configuration



***Create a new app called studyapp
-Now, project don't know that studyapp exists...so in settings.py > installed apps > studyapp.apps.StudyappConfig, This will connect to the app directly


***creating views in projects ka urls.py
from django.contrib import admin
from django.urls import path
from django.http import HttpResponse

def home(request):
    return HttpResponse("Home page")

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',home)
]

---IF WE MAKE A BIG PROJECT, THIS SHIT WILL GET MORE MESSY AS WE GO SO WE'LL FOLLOW AN OTHER APPROACH TO DEAL WITH THIS

urls.py(project)>urls.py(app)>views 

configure the urls.py(app) in urls.py(project)
And do the thing(You know rest)



---Adding Templates
add a folder called templates in root directory

---Configure templates
go to settings->TEMPLATES-> DIRS=[BASE_DIR/"templates] (this says go to base directly and search for templates)
add templates to views.py by importing render and 
return render(request,'index.html')


--Template inheritance
-Reducing redundancy--->best example navbar, har html me nai daalna parega

base.html
<a href="/">LOGO</a>

<hr>

home.html
{% include 'base.html'%}

<h1>Home template</h1>


--Now instead of including 'base.html' everywhere we can just 'extend' the section of template engine code that will do
   

*******IMP*********
Template inheritance¶
The most powerful – and thus the most complex – part of Django’s template engine is template inheritance. 
Template inheritance allows you to build a base “skeleton” template that contains all the common elements of your site and defines blocks that child templates can override.

It's like react ka 'root' div element jiske {block content} ko alag alag components se bharege

Best reference for this
https://docs.djangoproject.com/en/4.2/ref/templates/language/

---You can use as many levels of inheritance as needed. One common way of using inheritance is the following three-level approach:

Create a base.html template that holds the main look-and-feel of your site.
Create a base_SECTIONNAME.html template for each “section” of your site. For example, base_news.html, base_sports.html. These templates all extend base.html and include section-specific styles/design.
Create individual templates for each type of page, such as a news article or blog entry. These templates extend the appropriate section template.


----Adding data onto the templates
views.py
rooms=[
    {'id':1,'name':"Let's learn python"},
    {'id':2,'name':"Design with me"},
    {'id':3,'name':"Frontend development"},
]

def home(request):
    return render(request,'home.html','rooms':rooms)

---we now have access to rooms in home template

home.html
<div>
{%for room in rooms%}
<h5>{{room.id}} --> {{room.name}}</h5>
{%endfor%}
</div>

we can make a context dictionary to just pass down as the parameter

context={"rooms":rooms}

return render("","",context)



---structuring the templates and seperating the templates which have only sections of the page
Make a new folder template in studyapp > New folder as same name as 'studyapp' > cut and paste home.html and room.html in that folder

Change in views.py
return render(request,'studyapp/home.html',context)



---dynamic url routing
urls.py(apps)

path('room/<str:pk>/',views.room,name="room")

views.py
def room(request,pk):
  room=None
  for i in rooms:
    if i['id']==int(pk):
            room=i
    context={'room':room}
  return render('--')

home.html
<h5>{{room.id}} --><a href="/room/{{room.id}}"> {{room.name}}</a></h5>



********DataBases and Queries**********
when we run django server, hame mssg aata hai 18 unapplied migrations, wo kis cheez ka hai bc?
Django built in authentication,admin,sessions,etc ke liye already db taiyaar rakhta hai which are ready to execute lol so vo 18 unapplied migrations unke hote hai.
python manage.py migrate
ban gaye hamare db's


models.py
--we'll make python classes which will will act as schemas

class Project(models.Model):
  title=models.CharField()
  decription=models.TextField()
  id=models.UUIDField()

migrate,makemigrations,createsuperuser all you know

admin.js me jaake authenticate kardo to make table appear into the admin panel
admin.site.register(Room)




***We'll now inject the data from views to the db we'll use model manager for doing so
queryset = ModelName.objects.all()
    |        |        |      |
Variable    Model   Model    Method
that holds  name    objects
response           attribute

.get()
.filter()
.exclude()


views.py
def home(request):
    rooms=Room.objects.all()
    context={"rooms":rooms}
    return render(request,'studyapp/home.html',context)


##various relationships: one to many, many to many, etc.
use    room=models.ForeignKey(Room,on_delete=models.CASCADE) in new model created called Message when the column is dependent on the other table for execution

-->Message is child of Room toh vo niche aayega Room class ke and make a new class Topic jo Room class ke upar aayega

class Message(models.Model):
    user=models.ForeignKey(User,on_delete=models.CASCADE)
    room=models.ForeignKey(Room,on_delete=models.CASCADE)
    body=models.TextField()
    updated=models.DateTimeField(auto_now=True)
    created=models.DateTimeField(auto_now_add=True)

    def __str__(self) :
        return self.body[0:50]

Topic
class Room(models.Model):
    #host=
    topic=models.ForeignKey(Topic,on_delete=models.SET_NULL)

class Topic(models.Model):
  name=models.CharField(max_length=20)



*******Important stuff -> CRUD operations other than the admin panel*******

We'll create a new file called room_form.py in studyapp root folder
waha pe submit button banake dusra ek aur file banaya forms.py karke 

forms.py
from django.forms import ModelForm
from .models import Room

class RoomForm(ModelForm):
    class Meta:
        model=Room
        fields='__all__'

view.py
def createRoom(request):
   form=RoomForm()
   if request.method=='POST':
      print(request.POST)
      # request.post.get('name')
      form=RoomForm(request.POST)
      if form.is_valid():
         form.save()
         return redirect('home')
   context={'form':form}
   return render(request,'studyapp/room_form.html',context)


****We'll try to add newest rooms created first into the home page directcly from the models
class Room:
    "------------------------"
    class Meta:
        ordering=['-updated','-created']  # '-' lagaya toh descending nai toh ascending


*****To update a room we create a new function in view called 'updateRoom'
def updateRoom(request,pk):
   room=Room.objects.get(id=pk)
   form=RoomForm(instance=room)

   if request.method=='POST':
      form=RoomForm(request.POST,instance=room)
      if form.is_valid():
         form.save()
         return redirect('home')
   context={'form':form}
   return render(request,'studyapp/room_form.html',context)

urls.py(app)
      path('update-room/<str:pk>/',views.updateRoom,name='update-room')

home.html
       <a href="{%url 'update-room' room.id%}">Edit</a>


**Now we add delete functionality to our project
--We'll have to create a new template just to create delete functionality in templates/studyapp
--It will be a generic template to delete any template from the project

delete.html
{%extends 'main.html' %}

{%block content%}
<form action="" method="post">
    <p>Are you sure you want to delete "{{obj}}"?</p>
    <a href="{{request.META.HTTP_REFERER}}">Go Back</a>
    <input type="submit" value="Confirm">
</form>
{%endblock content%}

views.py
def deleteRoom(request,pk):
   room=Room.objects.get(id=pk)
   if request.method=='POST':
      room.delete()
      return redirect('home')
   return render(request,'studyapp/delete.html',{'obj':room})

home.html

            <a href="{% url 'delete-room' room.id%}">Delete</a>






